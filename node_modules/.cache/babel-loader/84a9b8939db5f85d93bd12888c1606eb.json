{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/mac/Documents/keyboardSTUDY/src/keyboard.normal.js\";\n\n/***************************************************\n* CSC428/2514 - St. George, Fall 2018\n*\n* File: keyboard.normal.js\n* Summary: This component will display the Baseline keyboard.\n*\tThe baseline keyboard is just shrink its size to your watch size.\n*\tThis component renders width:1024 x height:548 keyboard image\n*\t on <img> tag with converted size.\n*\t'originalScale' you tossed from Watch component will be used here\n*\tto convert 1024x548 size into a smaller size.\n*\tKeyboard component will render following tags:\n*\t\t<div> container: A container, eventhandlers will be registered here.\n*\t\t\t<img> KB: An image displayed your keyboard layout.\n*\t\t\t<div> overlay: an input key will be displayed shortly here.\n*\n* The code is commented, and the comments provide information\n* about what each js file is doing.\n*\n* Written by: Seyong Ha, Mingming Fan, Sep. 2018\n*\t\t\t\tAssignment2: Quantitative Analysis\n*\t\t\t\tUpdated at: NA\n****************************************************/\n\n/**\n * Libraries\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Keymaps from './keys.js';\n/**\n * KeyboardNormal class extending React Component\n */\n\nvar KeyboardNormal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(KeyboardNormal, _React$Component);\n\n  /**\n   * Constructor\n   * @param {} props: a paramater which enables you to access\n   * \t\t\tvalues passed from parent Componenet(or Node).\n   * \t\t\te.g., if you pass 'value' as 5 in Watch component\n   * \t\t\t\t<Watch value={5}/>\n   * \t\t\t\tyou can access by calling 'this.props.value'\n   * \t\t\t\tprops are immutable.\n   */\n  function KeyboardNormal(props) {\n    var _this;\n\n    _classCallCheck(this, KeyboardNormal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(KeyboardNormal).call(this, props));\n    /**\n     * This components more state values.\n     * - originalScale: a scale value to resize a keyboard image.\n     * - swiped: A flag for swipe event.\n     * - imgStyle: CSS style for the keyboard image.\n     * - overlayStyle: CSS style for the overlay <div>\n     * - keyboardImg: A keyboard image to be displayed.\n     * - overlayText: a text for overlay <div>\n     * - originalDimensions: containing a dimension of chosen keyboard image.\n     */\n\n    _this.onSwipe = function (direction) {\n      if (direction === \"left\") {\n        // Delete character.\n        var key = \"delete\";\n\n        _this.props.onKeyCharReceived(key);\n      } else if (direction === \"up\") {\n        // Change keyboard layout from one to another.\n        // You have two keyboard layouts: Alphabet and Symbols.\n        var imgPath = _this.state.keyboardImg === _this.imgs[0] ? _this.imgs[1] : _this.imgs[0];\n\n        _this.setState({\n          keyboardImg: imgPath\n        });\n      } else if (direction === \"right\") {//do something here if you wish to use the swipt to the right gesture\n      } else if (direction === \"down\") {//do something here if you wish to use the swipt to the right gesture\n      }\n    };\n\n    _this.onKeyDown = function (ev) {\n      //console.log(\"Key pressed: \" + ev.key + \"/\" +ev.keyCode);\n      if (ev.keyCode === 37) {//\tconsole.log(\"[KeyPressed] Left arrow clicked\");\n      } else if (ev.keyCode === 38) {//\tconsole.log(\"[KeyPressed] Top arrow clicked\");\n      } else if (ev.keyCode === 39) {//\tconsole.log(\"[KeyPressed] Right arrow clicked\");\n      } else if (ev.keyCode === 40) {//\tconsole.log(\"[KeyPressed] Down arrow clicked\");\n      } else {\n        var key = String.fromCharCode(ev.keyCode).toLocaleLowerCase();\n\n        if (ev.keyCode === 8) {\n          ev.returnValue = false;\n          ev.cancleBubble = true;\n          key = \"delete\";\n        } else if (ev.keyCode === 13) {\n          key = \"Enter\";\n        } // process Callback function from parent Component,\n        // this will change inputChar and inputPhrase in Watch component.\n\n\n        _this.props.onKeyCharReceived(key); // Flashing a selected key on overlay <div>\n\n\n        _this.flashKey(key);\n\n        ev.nativeEvent.preventDefault();\n        ev.nativeEvent.stopPropagation();\n        return false;\n      }\n    };\n\n    _this.componentDidUpdate = function () {\n      // For touch event, we cannot use offsetX and offsetY\n      // \tto calculate the touched point on the keyboard image,\n      //  we stored the 'container' <div>'s left and top values on screen.\n      _this.offsetTop = ReactDOM.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).offsetTop;\n      _this.offsetLeft = ReactDOM.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).offsetLeft;\n    };\n\n    _this.reset = function (animated) {\n      //console.log(\"call reset...\");\n      _this.setViewPort({\n        x: 0,\n        y: 0,\n        //width: this.originalDimensions.width,\n        //height:this.originalDimensions.height\n        width: _this.state.originalDimensions.width,\n        height: _this.state.originalDimensions.height\n      }, animated === true);\n\n      _this.clearResetTimeout();\n\n      _this.inStartingPosition = true;\n    };\n\n    _this.setViewPort = function (viewport, animated) {\n      // Get initial window dimension\n      var windowDim = _this.getWindowDimension(); // Calculate the scale value of X, Y\n\n\n      var scaleX = windowDim.width / viewport.width;\n      var scaleY = windowDim.height / viewport.height; //var width = scaleX * this.originalDimensions.width;\n      //var height = scaleY * this.originalDimensions.height;\n      // get width and height with scale values computed above.\n\n      var width = scaleX * _this.state.originalDimensions.width;\n      var height = scaleY * _this.state.originalDimensions.height; // this x,y values will shift your image\n\n      var x = -1 * viewport.x * scaleX;\n      var y = -1 * viewport.y * scaleY; // reposition your keyboard image within 'container' <div>\n\n      _this.setPosition({\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }, animated);\n\n      _this.viewport = viewport;\n    };\n\n    _this.clearResetTimeout = function () {\n      if (_this.resetTimeout !== undefined) {\n        window.clearTimeout(_this.resetTimeout);\n      }\n\n      _this.resetTimeout = undefined;\n    };\n\n    _this.onKeyClick = function (pt) {\n      console.log(\"[onKeyClick] ...\" + pt.x);\n\n      var key = _this.getKeyChar(pt);\n\n      if (key != null) {\n        console.log(\"[onKeyClick] \" + key + \" typed.\");\n\n        _this.props.onKeyCharReceived(key);\n\n        _this.flashKey(key);\n      }\n\n      return false;\n    };\n\n    _this.getWindowDimension = function () {\n      //console.log(\"Scale: \"+this.config.originalScale)\n      return {\n        //width: this.originalDimensions.width * this.config.originalScale,\n        //height: this.originalDimensions.height * this.config.originalScale\n        width: _this.state.originalDimensions.width * _this.config.originalScale,\n        height: _this.state.originalDimensions.height * _this.config.originalScale\n      };\n    };\n\n    _this.getKeyChar = function (pt) {\n      console.log(\"Get KeyChar\");\n      var minDistance = false,\n          minDistanceKey = null;\n      var maxKeyErrorDistSquared = Math.pow(_this.config.maxKeyErrorDistance, 2); //Select which keyboard layout is currently displayed.\n\n      var keys = _this.state.keyboardImg === _this.imgs[0] ? Keymaps.keys : Keymaps.keys_sym; //Iterate through keymaps.\n\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var keychar = keys[i];\n        console.log(\"[keychar]: \" + keychar); //console.log(\"Point XY: \"+pt.x+\"/\"+pt.y);\n\n        if (keychar.x <= pt.x && keychar.y <= pt.y && keychar.x + keychar.width >= pt.x && keychar.y + keychar.height >= pt.y) {\n          //if point is within particular key.\n          return keychar.key;\n        } else {\n          // approximate the selected key.\n          var keyCharCenterX = keychar.x + keychar.width / 2;\n          var keyCharCenterY = keychar.y + keychar.height / 2;\n          var dx = pt.x - keyCharCenterX;\n          var dy = pt.y - keyCharCenterY;\n          var dSquared = Math.pow(dx, 2) + Math.pow(dy, 2);\n\n          if ((minDistanceKey === null || dSquared < minDistance) && dSquared < maxKeyErrorDistSquared * Math.pow(Math.min(keychar.width, keychar.height), 2)) {\n            minDistance = dSquared;\n            minDistanceKey = keychar.key;\n          }\n        }\n      }\n\n      return minDistanceKey;\n    };\n\n    _this.setPosition = function (position, animated) {\n      console.log(\"Entering setPosition() ...\" + position.width);\n\n      if (animated === false) {//img.css -webkit-transition none\n        //img.css -webkit-transition all 0.001s ease-out\n      }\n\n      _this.setState({\n        imgStyle: {\n          left: position.x,\n          top: position.y,\n          width: position.width,\n          height: position.height\n        }\n      });\n\n      _this.position = position;\n    };\n\n    _this.flashKey = function (key) {\n      if (key === \"delete\") {\n        _this.flash(\"&#x232B\");\n      } else if (key === \"enter\") {\n        _this.flash(\"&#9252;\");\n      } else if (key === \" \") {\n        _this.flash(\"&#9251;\");\n      } else {\n        _this.flash(key);\n      }\n    };\n\n    _this.flash = function (text, duration, color) {\n      duration = duration || 250;\n      color = color || \"white\"; //window.clearTimeout(this.flashTimeout);\n\n      _this.setState({\n        overlayStyle: {\n          opacity: 0.95,\n          color: color\n        },\n        overlayText: text\n      });\n\n      _this.flashTimeout = setTimeout(function () {\n        _this.setState({\n          overlayStyle: {\n            opacity: 0\n          }\n        });\n      }, duration);\n    };\n\n    var img = \"/images/ZoomBoard3b.png\";\n\n    if (_this.props.keys === 'alpha') {\n      img = img;\n    } else if (_this.props.keys === 'numeric') {\n      img = \"/images/symbols3b.png\";\n    }\n\n    _this.state = {\n      originalScale: _this.props.originalScale,\n      swiped: false,\n      imgStyle: {\n        left: 0,\n        top: 0,\n        width: _this.props.width,\n        height: _this.props.height\n      },\n      overlayStyle: {\n        opacity: 0,\n        color: \"white\"\n      },\n      keyboardImg: img,\n      overlayText: \"\",\n      originalDimensions: {\n        width: 0,\n        height: 0\n      }\n    }; // Following variables are necessary for rendering, but since they do not\n    // \tdirectly affect the rendering process, we are not going to set them as React States\n    //\tReact State affects UI rendering directly, which means , everytime your react state has changed\n    // \tby caling setState({}), render() function will be called.\n\n    _this.inStartingPosition = true;\n    _this.imgs = [\"/images/ZoomBoard3b.png\", \"/images/symbols3b.png\"];\n    _this.originalPosition = {\n      x: 0,\n      y: 0\n    };\n    _this.originalDimensions = {\n      width: 0,\n      height: 0\n    };\n    _this.displaySize = _this.props.displaySize;\n    _this._swipe = {};\n    _this.startX = 0.0;\n    _this.startY = 0.0; // Keyboard configuration settings\n\n    _this.config = {\n      resetTimeout: 1000,\n      animTime: 0.1,\n      useRealKeyboard: true,\n      maxKeyErrorDistance: 2,\n      // You can manipulate following two values to control swipe gesture threshold.\n      minSwipeX: 40,\n      minSwipeY: 1,\n      originalScale: _this.props.originalScale // register EventListener\n\n    };\n    _this.onLoad = _this.onLoad.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Check if PointerEvent is supported.\n    // PointerEvent is recommended for Chrome (> v55), Edge.\n    // Mouse&TouchEvent are recommended for other browsers.\n\n    if (window.PointerEvent) {\n      _this.onPointerUp = _this.onPointerUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onTouchStart = _this.onTouchStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._onTouchMove = _this._onTouchMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._onTouchEnd = _this._onTouchEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    } else {\n      _this.onTouchStart = _this.onTouchStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._onTouchMove = _this._onTouchMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._onTouchEnd = _this._onTouchEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n  /**\n   * Touch Event handlers\n   * @param {*} e : to access javascript touchevent,\n   * \t\t\t\t\tyou should access as 'e.nativeEvent'\n   */\n\n\n  _createClass(KeyboardNormal, [{\n    key: \"onTouchStart\",\n    value: function onTouchStart(e) {\n      console.log(\"touchstart\");\n      this.isMoving = false; //const touch = e.nativeEvent.touches[0];\n\n      if (this.inStartingPosition && e.nativeEvent.touches.length === 1) {\n        this.startX = e.nativeEvent.touches[0].pageX;\n        this.startY = e.nativeEvent.touches[0].pageY;\n        this.isMoving = true;\n      }\n    }\n    /**\n     * Touch Event Handler\n     * @param {*} e : touch event object.\n     */\n\n  }, {\n    key: \"_onTouchMove\",\n    value: function _onTouchMove(e) {\n      console.log('touchmove');\n\n      if (this.isMoving === true) {\n        console.log(\"move\");\n        var x = e.nativeEvent.touches[0].pageX;\n        var y = e.nativeEvent.touches[0].pageY;\n        var dx = this.startX - x;\n        var dy = this.startY - y;\n        console.log(\"DX: \" + dx + \"/\" + dy);\n\n        if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) >= this.config.minSwipeX) {\n          if (dx > 0) {\n            this.onSwipe(\"left\");\n            this.justGestured = true;\n            this.isMoving = false;\n            this.startX = this.startY = null;\n            console.log(\"swipeleft\");\n          } else {\n            this.onSwipe(\"right\");\n            this.justGestured = true;\n            this.isMoving = false;\n            this.startX = this.startY = null;\n            console.log(\"swiperight\");\n          }\n        } else if (Math.abs(dy) >= this.config.minSwipeY) {\n          if (dy > 0) {\n            this.onSwipe(\"up\");\n            console.log(\"swipeup\");\n            this.justGestured = true;\n            this.isMoving = false;\n            this.startX = this.startY = null;\n          } else {\n            this.onSwipe(\"down\");\n            this.justGestured = true;\n            this.isMoving = false;\n            this.startX = this.startY = null;\n          }\n        }\n      }\n    }\n    /**\n     * TouchEvent Handler\n     * @param {} e : touch event object.\n     */\n\n  }, {\n    key: \"_onTouchEnd\",\n    value: function _onTouchEnd(e) {\n      console.log('touchend');\n\n      if (this.justGestured === true) {\n        this.justGestured = false;\n        e.nativeEvent.preventDefault();\n        e.nativeEvent.stopPropagation();\n        return;\n      } else {\n        var touch = e.nativeEvent.changedTouches[0];\n        var x = (touch.clientX - this.offsetLeft) / (this.position.width / this.state.originalDimensions.width);\n        var y = (touch.clientY - this.offsetTop) / (this.position.height / this.state.originalDimensions.height);\n        e.nativeEvent.preventDefault();\n        e.nativeEvent.stopPropagation();\n        this.onKeyClick({\n          x: x,\n          y: y\n        });\n      }\n    }\n    /**\n     * SwipeEvent Handler, manually called from the code.\n     * \tCurrently, we are using only 'left' and 'up' directions.\n     * @param: direction, swiping direction.\n     */\n\n  }, {\n    key: \"onLoad\",\n\n    /**\n     * Image Load Event Handler\n     * \tThis callback is called when image has loaded.\n     * @param {*} param: an object containing information of loaded image.\n     */\n    value: function onLoad(_ref) {\n      var img = _ref.target;\n      //console.log(\"[onLoad] image naturalSize: \"+img.naturalWidth+\":\"+img.naturalHeight);\n\n      /*\n      this.originalDimensions = {\n      \twidth:img.naturalWidth,\n      \theight:img.naturalHeight\n      };*/\n      // Changing React state is asynchronous,\n      // \tto sync the change of the state and function call, pass the function as a parameter.\n      this.setState({\n        originalDimensions: {\n          width: img.naturalWidth,\n          height: img.naturalHeight\n        }\n      }, this.reset); //\n\n      if (this.displaySize !== undefined) {\n        this.config.originalScale = this.displaySize.width / this.originalDimensions.width;\n        /*\n        this.setState({\n        \toriginalScale:this.displaySize.width/this.original_dimensions.width\n        });*/\n      }\n    }\n    /**\n     * KeyDown Event Handler,\n     * \tFor input test. You can use your physical keyboard on your labtop.\n     * @param ev: keyboard event object.\n     */\n\n  }, {\n    key: \"onPointerUp\",\n\n    /**\n     * PointerUp Event Handler, use Only for Debugging on laptop\n     * @param {*} e\n     *  We are using offsetX and offsetY. The origin of offsetX and offsetY is left,top of 'container' <div>\n     */\n    value: function onPointerUp(e) {\n      // use e.nativeEvent.offsetX,Y for accuracy\n      if (e.nativeEvent.pointerType === \"touch\") {\n        //Do nothing\n        return false;\n      } //var x = e.nativeEvent.offsetX / (this.position.width/this.originalDimensions.width);\n      //var y = e.nativeEvent.offsetY / (this.position.height/this.originalDimensions.height);\n\n\n      var x = e.nativeEvent.offsetX / (this.position.width / this.state.originalDimensions.width);\n      var y = e.nativeEvent.offsetY / (this.position.height / this.state.originalDimensions.height);\n      console.log(\"[onPointerUp] xy: \" + x + \":\" + y);\n      this.onKeyClick({\n        x: x,\n        y: y\n      }); //e.preventDefault();\n      //e.stopPropagation();\n\n      return false;\n    }\n    /**\n     * MouseDown Event Handler,\n     *  same as PointerUp. This is implemented to test with your mouse on devtools of your browser.\n     * @param {*} e\n     */\n\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      // use e.nativeEvent.offsetX,Y for accuracy\n      //var x = e.nativeEvent.offsetX / (this.position.width/this.originalDimensions.width);\n      //var y = e.nativeEvent.offsetY / (this.position.height/this.originalDimensions.height);\n      var x = e.nativeEvent.offsetX / (this.position.width / this.state.originalDimensions.width);\n      var y = e.nativeEvent.offsetY / (this.position.height / this.state.originalDimensions.height);\n      console.log(\"[onMouseDown] xy: \" + x + \":\" + y);\n      console.log(\"[onMouseDown] position: \" + this.position.x + \":\" + this.position.y);\n      this.onKeyClick({\n        x: x,\n        y: y\n      });\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    /**\n     * Callback in React Componenet lifecycle.\n     * once all the component value has changed, this function is called.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * Render function\n     */\n    value: function render() {\n      var size = this.getWindowDimension();\n      var style = {\n        width: size.width,\n        height: size.height\n      };\n      var overlayStyle = {\n        width: size.width,\n        height: size.height,\n        opacity: this.state.overlayStyle.opacity,\n        color: this.state.overlayStyle.color,\n        fontSize: size.height / 1.2 + \"px\"\n      }; //const fontHeight = {\n      //\tfontSize : size.height/1.2\n      //}\n\n      var imgStyle = {\n        width: size.width,\n        height: size.height,\n        top: this.state.top,\n        left: this.state.left\n      };\n      console.log(\"[Rendering...] \" + size.width + \"/\" + size.height); // if your browser supports PointerEvent...\n\n      if (window.PointerEvent) {\n        return React.createElement(\"div\", {\n          className: \"container\",\n          style: style,\n          tabIndex: \"-1\",\n          onKeyDown: this.onKeyDown,\n          onTouchStart: this.onTouchStart,\n          onTouchMove: this._onTouchMove,\n          onTouchEnd: this._onTouchEnd,\n          onPointerUp: this.onPointerUp,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 381\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          id: \"keyboardtype\",\n          className: \"KB\",\n          alt: \"kb\",\n          src: this.state.keyboardImg,\n          onLoad: this.onLoad,\n          style: imgStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"overlay\",\n          style: overlayStyle,\n          dangerouslySetInnerHTML: {\n            __html: this.state.overlayText\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390\n          },\n          __self: this\n        }));\n      } else {\n        //else\n        return React.createElement(\"div\", {\n          className: \"container\",\n          style: style,\n          tabIndex: \"-1\",\n          onKeyDown: this.onKeyDown,\n          onTouchStart: this.onTouchStart,\n          onTouchMove: this._onTouchMove,\n          onTouchEnd: this._onTouchEnd,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          id: \"keyboardtype\",\n          className: \"KB\",\n          alt: \"kb\",\n          src: this.state.keyboardImg,\n          onLoad: this.onLoad,\n          style: imgStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"overlay\",\n          style: overlayStyle,\n          dangerouslySetInnerHTML: {\n            __html: this.state.overlayText\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407\n          },\n          __self: this\n        }));\n      }\n    }\n    /**\n     * Reset function.\n     * This function will reset a viewport to initial setup.\n     * @param animated: a flag for transition animation.\n     */\n\n  }]);\n\n  return KeyboardNormal;\n}(React.Component);\n\nexport default KeyboardNormal;","map":{"version":3,"sources":["/Users/mac/Documents/keyboardSTUDY/src/keyboard.normal.js"],"names":["React","ReactDOM","Keymaps","KeyboardNormal","props","onSwipe","direction","key","onKeyCharReceived","imgPath","state","keyboardImg","imgs","setState","onKeyDown","ev","keyCode","String","fromCharCode","toLocaleLowerCase","returnValue","cancleBubble","flashKey","nativeEvent","preventDefault","stopPropagation","componentDidUpdate","offsetTop","findDOMNode","offsetLeft","reset","animated","setViewPort","x","y","width","originalDimensions","height","clearResetTimeout","inStartingPosition","viewport","windowDim","getWindowDimension","scaleX","scaleY","setPosition","resetTimeout","undefined","window","clearTimeout","onKeyClick","pt","console","log","getKeyChar","config","originalScale","minDistance","minDistanceKey","maxKeyErrorDistSquared","Math","pow","maxKeyErrorDistance","keys","keys_sym","i","len","length","keychar","keyCharCenterX","keyCharCenterY","dx","dy","dSquared","min","position","imgStyle","left","top","flash","text","duration","color","overlayStyle","opacity","overlayText","flashTimeout","setTimeout","img","swiped","originalPosition","displaySize","_swipe","startX","startY","animTime","useRealKeyboard","minSwipeX","minSwipeY","onLoad","bind","PointerEvent","onPointerUp","onTouchStart","_onTouchMove","_onTouchEnd","onMouseDown","e","isMoving","touches","pageX","pageY","abs","justGestured","touch","changedTouches","clientX","clientY","target","naturalWidth","naturalHeight","pointerType","offsetX","offsetY","size","style","fontSize","__html","Component"],"mappings":"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","sourcesContent":["/***************************************************\n* CSC428/2514 - St. George, Fall 2018\n*\n* File: keyboard.normal.js\n* Summary: This component will display the Baseline keyboard.\n*\tThe baseline keyboard is just shrink its size to your watch size.\n*\tThis component renders width:1024 x height:548 keyboard image\n*\t on <img> tag with converted size.\n*\t'originalScale' you tossed from Watch component will be used here\n*\tto convert 1024x548 size into a smaller size.\n*\tKeyboard component will render following tags:\n*\t\t<div> container: A container, eventhandlers will be registered here.\n*\t\t\t<img> KB: An image displayed your keyboard layout.\n*\t\t\t<div> overlay: an input key will be displayed shortly here.\n*\n* The code is commented, and the comments provide information\n* about what each js file is doing.\n*\n* Written by: Seyong Ha, Mingming Fan, Sep. 2018\n*\t\t\t\tAssignment2: Quantitative Analysis\n*\t\t\t\tUpdated at: NA\n****************************************************/\n\n/**\n * Libraries\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Keymaps from './keys.js';\n\n/**\n * KeyboardNormal class extending React Component\n */\nclass KeyboardNormal extends React.Component {\n\n\t/**\n\t * Constructor\n\t * @param {} props: a paramater which enables you to access\n\t * \t\t\tvalues passed from parent Componenet(or Node).\n\t * \t\t\te.g., if you pass 'value' as 5 in Watch component\n\t * \t\t\t\t<Watch value={5}/>\n\t * \t\t\t\tyou can access by calling 'this.props.value'\n\t * \t\t\t\tprops are immutable.\n\t */\n\tconstructor(props){\n\t\tsuper(props);\n\t\t/**\n\t\t * This components more state values.\n\t\t * - originalScale: a scale value to resize a keyboard image.\n\t\t * - swiped: A flag for swipe event.\n\t\t * - imgStyle: CSS style for the keyboard image.\n\t\t * - overlayStyle: CSS style for the overlay <div>\n\t\t * - keyboardImg: A keyboard image to be displayed.\n\t\t * - overlayText: a text for overlay <div>\n\t\t * - originalDimensions: containing a dimension of chosen keyboard image.\n\t\t */\n\t\t let img=\"/images/ZoomBoard3b.png\"\n\t\t if(this.props.keys==='alpha'){\n\t\t \timg=img;\n\t\t }else if(this.props.keys==='numeric'){\n\t\t \timg=\"/images/symbols3b.png\";\n\t\t }\n\t\tthis.state ={\n        \toriginalScale: this.props.originalScale,\n\t\t\tswiped: false,\n\t\t\timgStyle : {\n\t\t\t\tleft:0, top:0,\n\t\t\t\twidth: this.props.width,\n\t\t\t\theight: this.props.height\n\t\t\t},\n\t\t\toverlayStyle : {\n\t\t\t\topacity: 0,\n\t\t\t\tcolor: \"white\"\n\t\t\t},\n\t\t\tkeyboardImg : img,\n\t\t\toverlayText : \"\",\n\t\t\toriginalDimensions : {width:0, height:0}\n\t\t};\n\n\t\t// Following variables are necessary for rendering, but since they do not\n\t\t// \tdirectly affect the rendering process, we are not going to set them as React States\n\t\t//\tReact State affects UI rendering directly, which means , everytime your react state has changed\n\t\t// \tby caling setState({}), render() function will be called.\n\t\tthis.inStartingPosition = true;\n\t\tthis.imgs = [\"/images/ZoomBoard3b.png\",\"/images/symbols3b.png\"];\n        this.originalPosition =  {x:0,y:0};\n\t\tthis.originalDimensions = {width:0, height:0};\n\t\tthis.displaySize = this.props.displaySize;\n\t\tthis._swipe = {};\n\t\tthis.startX = 0.0;\n\t\tthis.startY = 0.0;\n\n\t\t// Keyboard configuration settings\n\t\tthis.config = {\n\t\t\tresetTimeout: 1000,\n\t\t\tanimTime: 0.1,\n\t\t\tuseRealKeyboard: true,\n\t\t\tmaxKeyErrorDistance: 2,\n\t\t\t// You can manipulate following two values to control swipe gesture threshold.\n\t\t\tminSwipeX: 40,\n\t\t\tminSwipeY: 1,\n\t\t\toriginalScale: this.props.originalScale\n\t\t}\n\n\t\t// register EventListener\n\t\tthis.onLoad = this.onLoad.bind(this);\n\t\tthis.onKeyDown = this.onKeyDown.bind(this);\n\n\t\t// Check if PointerEvent is supported.\n\t\t// PointerEvent is recommended for Chrome (> v55), Edge.\n\t\t// Mouse&TouchEvent are recommended for other browsers.\n\t\tif(window.PointerEvent){\n\t\t\tthis.onPointerUp = this.onPointerUp.bind(this);\n\t\t\tthis.onTouchStart = this.onTouchStart.bind(this);\n\t\t\tthis._onTouchMove = this._onTouchMove.bind(this);\n\t\t\tthis._onTouchEnd = this._onTouchEnd.bind(this);\n\t\t}else{\n\t\t\tthis.onTouchStart = this.onTouchStart.bind(this);\n\t\t\tthis.onMouseDown = this.onMouseDown.bind(this);\n\t\t\tthis._onTouchMove = this._onTouchMove.bind(this);\n\t\t\tthis._onTouchEnd = this._onTouchEnd.bind(this);\n\t\t}\n\t}\n\n\n\t/**\n\t * Touch Event handlers\n\t * @param {*} e : to access javascript touchevent,\n\t * \t\t\t\t\tyou should access as 'e.nativeEvent'\n\t */\n\tonTouchStart(e) {\n\t\tconsole.log(\"touchstart\");\n\t\tthis.isMoving = false;\n\t\t//const touch = e.nativeEvent.touches[0];\n\t\tif(this.inStartingPosition && e.nativeEvent.touches.length ===1){\n\t\t\tthis.startX = e.nativeEvent.touches[0].pageX;\n\t\t\tthis.startY = e.nativeEvent.touches[0].pageY;\n\t\t\tthis.isMoving = true;\n\t\t}\n\t}\n\n\t/**\n\t * Touch Event Handler\n\t * @param {*} e : touch event object.\n\t */\n\t_onTouchMove(e) {\n\t\tconsole.log('touchmove');\n\t\tif(this.isMoving === true){\n\t\tconsole.log(\"move\");\n\t\t\tvar x = e.nativeEvent.touches[0].pageX;\n\t\t\tvar y = e.nativeEvent.touches[0].pageY;\n\t\t\tvar dx = this.startX - x; \n\t\t\tvar dy = this.startY - y;\n\t\t\tconsole.log(\"DX: \"+dx+\"/\"+dy);\n\t\t\tif((Math.abs(dx) > Math.abs(dy)) &&\n\t\t\t\tMath.abs(dx) >= this.config.minSwipeX){\n\t\t\t\tif(dx > 0){\n\t\t\t\t\tthis.onSwipe(\"left\");\n\t\t\t\t\tthis.justGestured = true;\n\t\t\t\t\tthis.isMoving = false;\n\t\t\t\t\tthis.startX = this.startY = null;\n\t\t\t\t\tconsole.log(\"swipeleft\");\n\t\t\t\t}else{\n\t\t\t\t\tthis.onSwipe(\"right\");\n\t\t\t\t\tthis.justGestured = true;\n\t\t\t\t\tthis.isMoving = false;\n\t\t\t\t\tthis.startX = this.startY = null;\n\t\t\t\t\tconsole.log(\"swiperight\");\n\t\t\t\t}\n\t\t\t}else if(Math.abs(dy) >= this.config.minSwipeY){\n\t\t\t\tif(dy > 0){\n\t\t\t\t\tthis.onSwipe(\"up\");\n\t\t\t\t\tconsole.log(\"swipeup\");\n\t\t\t\t\tthis.justGestured = true;\n\t\t\t\t\tthis.isMoving = false;\n\t\t\t\t\tthis.startX = this.startY = null;\n\t\t\t\t}else{\n\t\t\t\t\tthis.onSwipe(\"down\");\n\t\t\t\t\tthis.justGestured = true;\n\t\t\t\t\tthis.isMoving = false;\n\t\t\t\t\tthis.startX = this.startY = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * TouchEvent Handler\n\t * @param {} e : touch event object.\n\t */\n\t_onTouchEnd(e) {\n\t\tconsole.log('touchend');\n\t\tif(this.justGestured === true){\n\t\t\tthis.justGestured = false;\n\t\t\te.nativeEvent.preventDefault();\n\t\t\te.nativeEvent.stopPropagation();\n\t\t\treturn;\n\t\t}else{\n\t\t\tconst touch = e.nativeEvent.changedTouches[0];\n\t\t\tvar x = (touch.clientX - this.offsetLeft) / (this.position.width/this.state.originalDimensions.width);\n\t\t\tvar y = (touch.clientY - this.offsetTop) / (this.position.height/this.state.originalDimensions.height);\n\t\t\te.nativeEvent.preventDefault();\n\t\t\te.nativeEvent.stopPropagation();\n\t\t\tthis.onKeyClick({x:x,y:y});\n\t\t}\n\t}\n\n\t/**\n\t * SwipeEvent Handler, manually called from the code.\n\t * \tCurrently, we are using only 'left' and 'up' directions.\n\t * @param: direction, swiping direction.\n\t */\n\tonSwipe = (direction) => {\n\t\tif(direction === \"left\"){ // Delete character.\n\t\t\tvar key = \"delete\";\n\t\t\tthis.props.onKeyCharReceived(key);\n\t\t}else if(direction === \"up\"){ // Change keyboard layout from one to another.\n\t\t\t// You have two keyboard layouts: Alphabet and Symbols.\n\t\t\tvar imgPath = (this.state.keyboardImg === this.imgs[0])? this.imgs[1] : this.imgs[0];\n\t\t\tthis.setState({\n\t\t\t\tkeyboardImg:imgPath\n\t\t\t})\n\t\t} else if(direction === \"right\"){\n\t\t\t//do something here if you wish to use the swipt to the right gesture\n\t\t}\n\t\telse if(direction === \"down\"){\n\t\t\t//do something here if you wish to use the swipt to the right gesture\n\t\t}\n\t}\n\n\t/**\n\t * Image Load Event Handler\n\t * \tThis callback is called when image has loaded.\n\t * @param {*} param: an object containing information of loaded image.\n\t */\n\tonLoad({target:img}){\n\t\t//console.log(\"[onLoad] image naturalSize: \"+img.naturalWidth+\":\"+img.naturalHeight);\n\n\t\t/*\n\t\tthis.originalDimensions = {\n\t\t\twidth:img.naturalWidth,\n\t\t\theight:img.naturalHeight\n\t\t};*/\n\n\t\t// Changing React state is asynchronous,\n\t\t// \tto sync the change of the state and function call, pass the function as a parameter.\n\t\tthis.setState({\n\t\t\toriginalDimensions:{\n\t\t\t\twidth:img.naturalWidth,\n\t\t\t\theight:img.naturalHeight\n\t\t\t}\n\t\t},this.reset);\n\n\t\t//\n\t\tif(this.displaySize !== undefined){\n\t\t\tthis.config.originalScale = this.displaySize.width/this.originalDimensions.width;\n\t\t\t/*\n\t\t\tthis.setState({\n\t\t\t\toriginalScale:this.displaySize.width/this.original_dimensions.width\n\t\t\t});*/\n\t\t}\n\t}\n\n\t/**\n\t * KeyDown Event Handler,\n\t * \tFor input test. You can use your physical keyboard on your labtop.\n\t * @param ev: keyboard event object.\n\t */\n\tonKeyDown = (ev) => {\n\t\t//console.log(\"Key pressed: \" + ev.key + \"/\" +ev.keyCode);\n\t\tif(ev.keyCode === 37){\n\t\t//\tconsole.log(\"[KeyPressed] Left arrow clicked\");\n\t\t}else if(ev.keyCode === 38){\n\t\t//\tconsole.log(\"[KeyPressed] Top arrow clicked\");\n\t\t}else if(ev.keyCode === 39){\n\t\t//\tconsole.log(\"[KeyPressed] Right arrow clicked\");\n\t\t}else if(ev.keyCode === 40){\n\t\t//\tconsole.log(\"[KeyPressed] Down arrow clicked\");\n\t\t}else{\n\t\t\tvar key = String.fromCharCode(ev.keyCode).toLocaleLowerCase();\n\t\t\tif(ev.keyCode === 8){\n\t\t\t\tev.returnValue = false;\n\t\t\t\tev.cancleBubble = true;\n\t\t\t\tkey = \"delete\";\n\t\t\t}else if(ev.keyCode === 13){\n\t\t\t\tkey = \"Enter\";\n\t\t\t}\n\t\t\t// process Callback function from parent Component,\n\t\t\t// this will change inputChar and inputPhrase in Watch component.\n\t\t\tthis.props.onKeyCharReceived(key);\n\n\t\t\t// Flashing a selected key on overlay <div>\n\t\t\tthis.flashKey(key);\n\t\t\tev.nativeEvent.preventDefault();\n\t\t\tev.nativeEvent.stopPropagation();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * PointerUp Event Handler, use Only for Debugging on laptop\n\t * @param {*} e\n\t *  We are using offsetX and offsetY. The origin of offsetX and offsetY is left,top of 'container' <div>\n\t */\n\tonPointerUp(e){\n\t\t// use e.nativeEvent.offsetX,Y for accuracy\n\t\tif(e.nativeEvent.pointerType === \"touch\"){\n\t\t\t//Do nothing\n\t\t\treturn false;\n\t\t}\n\t\t//var x = e.nativeEvent.offsetX / (this.position.width/this.originalDimensions.width);\n\t\t//var y = e.nativeEvent.offsetY / (this.position.height/this.originalDimensions.height);\n\t\tvar x = e.nativeEvent.offsetX / (this.position.width/this.state.originalDimensions.width);\n\t\tvar y = e.nativeEvent.offsetY / (this.position.height/this.state.originalDimensions.height);\n\t\tconsole.log(\"[onPointerUp] xy: \"+ x + \":\" + y);\n\t\tthis.onKeyClick({x:x,y:y});\n\t\t//e.preventDefault();\n\t\t//e.stopPropagation();\n\t\treturn false;\n\t}\n\n\t/**\n\t * MouseDown Event Handler,\n\t *  same as PointerUp. This is implemented to test with your mouse on devtools of your browser.\n\t * @param {*} e\n\t */\n\tonMouseDown(e) {\n\t\t// use e.nativeEvent.offsetX,Y for accuracy\n\t\t//var x = e.nativeEvent.offsetX / (this.position.width/this.originalDimensions.width);\n\t\t//var y = e.nativeEvent.offsetY / (this.position.height/this.originalDimensions.height);\n\t\tvar x = e.nativeEvent.offsetX / (this.position.width/this.state.originalDimensions.width);\n\t\tvar y = e.nativeEvent.offsetY / (this.position.height/this.state.originalDimensions.height);\n\t\tconsole.log(\"[onMouseDown] xy: \"+ x + \":\" + y);\n\t\tconsole.log(\"[onMouseDown] position: \"+ this.position.x + \":\" + this.position.y);\n\t\tthis.onKeyClick({x:x,y:y});\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t}\n\n\t/**\n\t * Callback in React Componenet lifecycle.\n\t * once all the component value has changed, this function is called.\n\t */\n\tcomponentDidUpdate = () => {\n\t\t// For touch event, we cannot use offsetX and offsetY\n\t\t// \tto calculate the touched point on the keyboard image,\n\t\t//  we stored the 'container' <div>'s left and top values on screen.\n\t\tthis.offsetTop = ReactDOM.findDOMNode(this).offsetTop;\n\t\tthis.offsetLeft = ReactDOM.findDOMNode(this).offsetLeft;\n\t}\n\n\t/**\n\t * Render function\n\t */\n\trender(){\n\t\tconst size = this.getWindowDimension();\n\t\tconst style = {\n\t\t\twidth: size.width,\n\t\t\theight: size.height\n\t\t};\n\t\tconst overlayStyle = {\n\t\t\twidth: size.width,\n\t\t\theight: size.height,\n\t\t\topacity: this.state.overlayStyle.opacity,\n\t\t\tcolor: this.state.overlayStyle.color,\n\t\t\tfontSize:(size.height/1.2)+\"px\"\n\t\t};\n\t\t//const fontHeight = {\n\t\t//\tfontSize : size.height/1.2\n\t\t//}\n\t\tconst imgStyle = {\n\t\t\twidth:size.width,\n\t\t\theight:size.height,\n\t\t\ttop: this.state.top,\n\t\t\tleft: this.state.left\n\t\t}\n\t\tconsole.log(\"[Rendering...] \" + size.width +\"/\"+size.height);\n\t\t// if your browser supports PointerEvent...\n\t\tif(window.PointerEvent){\n\t\t\treturn(\n\t\t\t\t<div className=\"container\" style = {style} tabIndex=\"-1\"\n\t\t\t\t\t\tonKeyDown={this.onKeyDown}\n\t\t\t\t\t\tonTouchStart={this.onTouchStart}\n\t\t\t\t\t\tonTouchMove={this._onTouchMove}\n\t\t\t\t\t\tonTouchEnd={this._onTouchEnd}\n\t\t\t\t\t\tonPointerUp = {this.onPointerUp}>\n\t\t\t\t\t<img id=\"keyboardtype\" className=\"KB\" alt=\"kb\"\n\t\t\t\t\t\tsrc={this.state.keyboardImg} onLoad={this.onLoad}\n\t\t\t\t\t\tstyle={imgStyle}/>\n\t\t\t\t\t<div className=\"overlay\"\n\t\t\t\t\t\tstyle={overlayStyle}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t__html: this.state.overlayText\n\t\t\t\t\t\t}}></div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}else{ //else\n\t\t\treturn(\n\t\t\t\t<div className=\"container\" style = {style} tabIndex=\"-1\"\n\t\t\t\t\t\tonKeyDown={this.onKeyDown}\n\t\t\t\t\t\tonTouchStart={this.onTouchStart}\n\t\t\t\t\t\tonTouchMove={this._onTouchMove}\n\t\t\t\t\t\tonTouchEnd={this._onTouchEnd}>\n\t\t\t\t\t<img id=\"keyboardtype\" className=\"KB\" alt=\"kb\"\n\t\t\t\t\t\tsrc={this.state.keyboardImg} onLoad={this.onLoad}\n\t\t\t\t\t\tstyle={imgStyle}/>\n\t\t\t\t\t<div className=\"overlay\"\n\t\t\t\t\t\tstyle={overlayStyle}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t__html: this.state.overlayText\n\t\t\t\t\t\t}}></div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\t/**\n\t * Reset function.\n\t * This function will reset a viewport to initial setup.\n\t * @param animated: a flag for transition animation.\n\t */\n\treset = (animated) => {\n\t\t//console.log(\"call reset...\");\n\t\tthis.setViewPort({\n\t\t\tx:0 , y:0,\n\t\t\t//width: this.originalDimensions.width,\n\t\t\t//height:this.originalDimensions.height\n\t\t\twidth: this.state.originalDimensions.width,\n\t\t\theight:this.state.originalDimensions.height\n\t\t\t},animated === true);\n\t\tthis.clearResetTimeout();\n\t\tthis.inStartingPosition = true;\n\t}\n\n\t/**\n\t * setViewport function\n\t * @param viewport: a viewport to be set\n\t * \t\t\t\tviewport paramters has x, y, width, and height.\n\t * @param animated: a flag for transition animation.\n\t */\n\tsetViewPort = (viewport,animated) =>{\n\t\t// Get initial window dimension\n\t\tvar windowDim = this.getWindowDimension();\n\t\t// Calculate the scale value of X, Y\n\t\tvar scaleX = windowDim.width/viewport.width;\n\t\tvar scaleY = windowDim.height/viewport.height;\n\t\t//var width = scaleX * this.originalDimensions.width;\n\t\t//var height = scaleY * this.originalDimensions.height;\n\t\t// get width and height with scale values computed above.\n\t\tvar width = scaleX * this.state.originalDimensions.width;\n\t\tvar height = scaleY * this.state.originalDimensions.height;\n\t\t// this x,y values will shift your image\n\t\tvar x = -1 * viewport.x * scaleX;\n\t\tvar y = -1 * viewport.y * scaleY;\n\n\t\t// reposition your keyboard image within 'container' <div>\n\t\tthis.setPosition({x:x,y:y,width:width,height:height},animated);\n\t\tthis.viewport = viewport;\n\t}\n\n\tclearResetTimeout = () => {\n\t\tif(this.resetTimeout !== undefined){\n\t\t\twindow.clearTimeout(this.resetTimeout);\n\t\t}\n\t\tthis.resetTimeout = undefined;\n\t}\n\n\t/**\n\t * KeyClick event on the keyboard image.\n\t */\n\tonKeyClick = (pt) => {\n\n\t\tconsole.log(\"[onKeyClick] ...\"+pt.x);\n\t\tvar key = this.getKeyChar(pt);\n\n\t\tif(key != null){\n\t\t\tconsole.log(\"[onKeyClick] \"+key+\" typed.\");\n\t\t\tthis.props.onKeyCharReceived(key);\n\t\t\tthis.flashKey(key);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get WindowDimension\n\t * \tcompute the windowdimension with your originalScale value.\n\t * \tThis will return initial keyboard image size and your watch size.\n\t */\n\tgetWindowDimension = () => {\n\t\t//console.log(\"Scale: \"+this.config.originalScale)\n\t\treturn {\n\t\t\t//width: this.originalDimensions.width * this.config.originalScale,\n\t\t\t//height: this.originalDimensions.height * this.config.originalScale\n\t\t\twidth: this.state.originalDimensions.width * this.config.originalScale,\n\t\t\theight: this.state.originalDimensions.height * this.config.originalScale\n\t\t};\n\t}\n\n\t/**\n\t * Compute KeyChar on the keyboard iamge.\n\t * @param pt: x,y value on the keyboard image.\n\t */\n\tgetKeyChar = (pt) => {\n\t\tconsole.log(\"Get KeyChar\");\n\t\tvar minDistance = false, minDistanceKey = null;\n\t\tvar maxKeyErrorDistSquared = Math.pow(this.config.maxKeyErrorDistance,2);\n\n\t\t//Select which keyboard layout is currently displayed.\n\t\tvar keys = (this.state.keyboardImg === this.imgs[0])? Keymaps.keys : Keymaps.keys_sym;\n\n\t\t//Iterate through keymaps.\n\t\tfor(var i=0, len = keys.length; i<len; i++){\n\t\t\tvar keychar = keys[i];\n\t\t\tconsole.log(\"[keychar]: \"+keychar);\n\t\t\t//console.log(\"Point XY: \"+pt.x+\"/\"+pt.y);\n\t\t\tif(keychar.x <= pt.x && keychar.y <= pt.y && keychar.x + keychar.width >= pt.x && keychar.y + keychar.height >= pt.y)\n\t\t\t{\n\t\t\t\t//if point is within particular key.\n\t\t\t\treturn keychar.key;\n\t\t\t}else{ // approximate the selected key.\n\t\t\t\tvar keyCharCenterX = keychar.x + keychar.width/2;\n\t\t\t\tvar keyCharCenterY = keychar.y + keychar.height/2;\n\t\t\t\tvar dx = pt.x - keyCharCenterX;\n\t\t\t\tvar dy = pt.y - keyCharCenterY;\n\t\t\t\tvar dSquared = Math.pow(dx,2) + Math.pow(dy,2);\n\t\t\t\tif((minDistanceKey === null || dSquared < minDistance) &&\n\t\t\t\t\t dSquared < maxKeyErrorDistSquared * Math.pow(Math.min(keychar.width, keychar.height), 2))\n\t\t\t\t{\n\t\t\t\t\tminDistance = dSquared;\n\t\t\t\t\tminDistanceKey = keychar.key;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn minDistanceKey;\n\t}\n\n\t/**\n\t * Reposition the keyboard image in <img> tag,\n\t * @param position: x,y values should be negative values.\n\t * \t\t\t\twidth and height are newly computed the size of keyboard image\n\t */\n\tsetPosition = (position,animated) => {\n\t\tconsole.log(\"Entering setPosition() ...\"+position.width);\n\t\tif(animated === false){\n\t\t\t//img.css -webkit-transition none\n\t\t\t//img.css -webkit-transition all 0.001s ease-out\n\t\t}\n\t\tthis.setState({\n\t\t\timgStyle:{\n\t\t\t\tleft:position.x,\n\t\t\t\ttop:position.y,\n\t\t\t\twidth:position.width,\n\t\t\t\theight:position.height\n\t\t\t}\n\t\t})\n\t\tthis.position = position;\n\t}\n\n\tflashKey = (key) => {\n\t\tif(key === \"delete\") {\n\t\t\tthis.flash(\"&#x232B\");\n\t\t} else if(key === \"enter\") {\n\t\t\tthis.flash(\"&#9252;\");\n\t\t} else if(key === \" \") {\n\t\t\tthis.flash(\"&#9251;\");\n\t\t} else {\n\t\t\tthis.flash(key);\n\t\t}\n\t}\n\tflash = (text, duration, color) => {\n\t\tduration = duration || 250;\n\t\tcolor = color || \"white\";\n\t\t//window.clearTimeout(this.flashTimeout);\n\t\tthis.setState({\n\t\t\toverlayStyle:{\n\t\t\t\topacity: 0.95,\n\t\t\t\tcolor: color\n\t\t\t},\n\t\t\toverlayText: text\n\t\t});\n\t\tthis.flashTimeout = setTimeout(\n\t\t\t(() => {\n\t\t\t\tthis.setState({\n\t\t\t\toverlayStyle:{\n\t\t\t\t\topacity: 0}})\n\t\t\t})\n\t\t\t,duration\n\t\t);\n\t}\n}\n\nexport default KeyboardNormal;\n"]},"metadata":{},"sourceType":"module"}