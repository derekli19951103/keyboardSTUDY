{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Documents/keyboardSTUDY/src/App.js\";\n\n/***********************************************\n * CSC428/2514 - St. George, Fall 2018\n * \n * File: App.js\n * Summary: Routing details are implemented here.\n * \n * Written by: Seyong Ha, Mingming Fan, Oct. 2018\n *  Updated at: NA\n **********************************************/\n\n/**\n * Libraries\n */\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport Watch from './watch.js';\nimport MetaTags from 'react-meta-tags';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /**\n     * Routing rules will be describing here.\n     * You can set your own Routing rules. In current settings,\n     * You can access a Watch interface with 'type' and 'scaleVal'\n     * e.g. : http://{ADDRESS}:{PORT}/{TYPE}/{SCALE_VALUE}\n     * Type : This property will determine which version of text entry system\n     *         you are going to use.\n     *          'normal': baseline condition, normal keyboard\n     *          'zoom'  : A keyboard has a zoom function.\n     * ScaleValue: This property will determine your watch screen size. \n     *          In previous Starter code, we define a screen size either 'size', 'devicePPI' or\n     *          'originalScale' values. Here, you have to use only scale value.\n     *          For example, you can use 0.112 for AppleWatch size 42mm and\n     *                      0.103 for AppleWatch size 38mm.\n     *          default value is 0.15 \n     */\n    value: function render() {\n      // With the following rules, \n      // You have three routes, (assuming you are running on localhost with 3000 port)\n      // 1. localhost:3000\n      // 2. localhost:3000/type/scaleVal. > e.g. http://localhost:3000/normal/0.15\n      // You can add more rules.\n      return React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(MetaTags, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"meta\", {\n        name: \"viewport\",\n        content: \"width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render(props) {\n          return React.createElement(Watch, Object.assign({}, props, {\n            originalScale: 0.15,\n            type: 'zoom',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/:type/:scaleVal\",\n        component: Watch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Documents/keyboardSTUDY/src/App.js"],"names":["React","Route","Watch","MetaTags","App","props","Component"],"mappings":";;;;;;;AAAA;;;;;;;;;;AASA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;IAEMC,G;;;;;;;;;;;;;;AACF;;;;;;;;;;;;;;;;6BAgBQ;AACJ;AACA;AACA;AACA;AACA;AACA,aACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,4EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,MAAM,EAAI,gBAACC,KAAD;AAAA,iBAAW,oBAAC,KAAD,oBAAWA,KAAX;AAAkB,YAAA,aAAa,EAAE,IAAjC;AAAuC,YAAA,IAAI,EAAE,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAX;AAAA,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,kBAAlB;AAAqC,QAAA,SAAS,EAAEH,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AASH;;;;EAhCaF,KAAK,CAACM,S;;AAmCxB,eAAeF,GAAf","sourcesContent":["/***********************************************\n * CSC428/2514 - St. George, Fall 2018\n * \n * File: App.js\n * Summary: Routing details are implemented here.\n * \n * Written by: Seyong Ha, Mingming Fan, Oct. 2018\n *  Updated at: NA\n **********************************************/\n/**\n * Libraries\n */\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport Watch from './watch.js';\nimport MetaTags from 'react-meta-tags'\n\nclass App extends React.Component{\n    /**\n     * Routing rules will be describing here.\n     * You can set your own Routing rules. In current settings,\n     * You can access a Watch interface with 'type' and 'scaleVal'\n     * e.g. : http://{ADDRESS}:{PORT}/{TYPE}/{SCALE_VALUE}\n     * Type : This property will determine which version of text entry system\n     *         you are going to use.\n     *          'normal': baseline condition, normal keyboard\n     *          'zoom'  : A keyboard has a zoom function.\n     * ScaleValue: This property will determine your watch screen size. \n     *          In previous Starter code, we define a screen size either 'size', 'devicePPI' or\n     *          'originalScale' values. Here, you have to use only scale value.\n     *          For example, you can use 0.112 for AppleWatch size 42mm and\n     *                      0.103 for AppleWatch size 38mm.\n     *          default value is 0.15 \n     */\n    render(){\n        // With the following rules, \n        // You have three routes, (assuming you are running on localhost with 3000 port)\n        // 1. localhost:3000\n        // 2. localhost:3000/type/scaleVal. > e.g. http://localhost:3000/normal/0.15\n        // You can add more rules.\n        return (\n            <div className=\"wrapper\">\n                <MetaTags>\n                    <meta name=\"viewport\" content=\"width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"></meta>\n                </MetaTags>\n                <Route exact path=\"/\" render = {(props) => <Watch {...props} originalScale={0.15} type={'zoom'}/>} />\n                <Route exact path=\"/:type/:scaleVal\" component={Watch}/> \n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}