{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Documents/keyboardSTUDY/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Documents/keyboardSTUDY/src/watch.js\";\n\n/***************************************************\n* CSC428/2514 - St. George, Fall 2018\n*\n* File: watch.js\n* Summary: Watch Component\n*\n* The code is commented, and the comments provide information\n* about what each js file is doing.\n*\n* Written by: Seyong Ha, Mingming Fan, Sep. 2018\n*\t\t\t\tAssignment2: Quantitative Analysis\n*\t\t\t\tUpdated at: NA\n****************************************************/\n\n/**\n * Libraries\n */\nimport React from 'react';\nimport './index.css';\nimport TextArea from './textarea';\nimport KeyboardNormal from './keyboard.normal';\nimport KeyboardZoom from './keyboard.wip';\n/**\n * Functions\n */\n\n/**\n * @Deprecated.\n * Calculate watch size (width and height) in pixels.\n * \tif you decide to use exact AppleWatch size, use this function to get width and height.\n * @param: ppi , your device independent pixel per inch. Can be acheived from the web.\n * @param: watchSize, default apple watch size, 38mm or 42mm.\n * \t\t\tother size value will be return zero in size.\n */\n\nvar deviceIndependenceSize = function deviceIndependenceSize(ppi, watchSize) {\n  var width, height, deviceWidthInPixel, deviceHeightInPixel;\n\n  if (watchSize === 42) {\n    // AppleWatch Series 3 + size 42mm has a resolution of 312x390 px, 302 ppi\n    //\tDeviceSize: {Width:33.3, Height: 38.6mm}\n    //\tScreenSize: {Width: 26mm , Height: 33mm}\n    width = 26;\n    height = 33;\n    deviceWidthInPixel = width / 25.4 * ppi;\n    deviceHeightInPixel = height / 25.4 * ppi;\n    return {\n      width: deviceWidthInPixel,\n      height: deviceHeightInPixel\n    };\n  } else if (watchSize === 38) {\n    // AppleWatch Series 3 + size 38mm has a resolution of 272x340 px, 290 ppi\n    // \tDeviceSize: {Width: 33.3mm, Height:42.5mm}\n    //\tScreenSize: {Width: 24mm, Height: 30mm}\n    width = 24;\n    height = 30;\n    deviceWidthInPixel = width / 25.4 * ppi;\n    deviceHeightInPixel = height / 25.4 * ppi;\n    return {\n      width: deviceWidthInPixel,\n      height: deviceHeightInPixel\n    };\n  } else {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n};\n/**\n * Download user typed content and target phrases\n * you can and should add more measurements\n * that you recorded in your study into the text parameter\n * so that you can save them into a file\n * @param {*} text:\n * @param {*} name:\n * @param {*} type:\n */\n\n\nfunction download(text, name, type) {\n  // console.log(JSON.parse(text));\n  var a = document.createElement(\"a\");\n  var file = new Blob([text], {\n    type: type\n  });\n  a.href = URL.createObjectURL(file);\n  a.download = name;\n  a.click();\n}\n/**\n * Watch Class\n * This class extends React.Component\n */\n\n\nvar Watch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Watch, _React$Component);\n\n  /**\n   * Constructor\n   * @param {} props: a paramater which enables you to access\n   * \t\t\tvalues passed from parent Componenet(or Node).\n   * \t\t\te.g., if you pass 'value' as 5 in Watch component\n   * \t\t\t\t<Watch value={5}/>\n   * \t\t\t\tyou can access by calling 'this.props.value'\n   * \t\t\t\tprops are immutable.\n   */\n  function Watch(props) {\n    var _this;\n\n    _classCallCheck(this, Watch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Watch).call(this, props)); //Your URL parameter can be accessed with following syntax.\n\n    _this.onKeyCharReceived = function (c) {\n      _this.setState({\n        inputChar: c\n      });\n\n      _this.state.inputPhrase += c;\n    };\n\n    _this.saveData = function () {\n      var log_file = JSON.stringify({\n        user: _this.userid,\n        targetPhrase: _this.targetPhrase,\n        inputPhrase: _this.state.inputPhrase,\n        timestamp: Date(Date.now()).toString()\n      });\n      download(log_file, \"results.txt\", \"text/plain\");\n    };\n\n    console.log(_this.props.type);\n    console.log(_this.props.type === undefined);\n    _this.type = _this.props.type === undefined ? _this.props.match.params.type : _this.props.type;\n    _this.originalScale = _this.props.originalScale === undefined ? _this.props.match.params.scaleVal : _this.props.originalScale;\n    _this.userid = _this.props.userid === undefined ? _this.props.match.params.userid : _this.props.userid; //this.type = this.props.match.params.type;\n    //this.originalScale = this.props.match.params.scaleVal;\n\n    console.log(\"[Watch] type: \" + _this.type);\n    console.log(\"[Watch] originalScale: \" + _this.originalScale); // React Component States.\n    // inputPhrase: a variable containing all characters typed by users.\n    // inputChar: a variable containing your current input character from the Keyboard.\n    // if 'inputPhrase' or 'inputChar' value has changed by onKeyCharReceived(),\n    // Watch Component will re-render the interface if the state has changed by calling\n    // \tsetState({});\n\n    _this.state = {\n      inputPhrase: \"\",\n      inputChar: \"\"\n    }; //add the target phrases here or load them from external files\n\n    _this.targetPhrase = \"target phrase one\"; // For Debug, uncomment only if you want to measure exact width and height in pixels.\n    // Following codes won't be affected on any of your code. \n\n    /*\n    var size42 = deviceIndependenceSize(112,42);\n    console.log(\"AppleWatch 42mm => \"+size42.width +\"/\"+size42.height);\n    var size38 = deviceIndependenceSize(112,38);\n    console.log(\"AppleWatch 38mm => \"+size38.width +\"/\"+size38.height);\n    */\n\n    return _this;\n  }\n  /**\n   * Callback for input character changes.\n   * @param {} c: changed character\n   *\n   * This callback will be passed to child (Keyboard components, in our case).\n   * when the input character received, it changes inputPhrase state.\n   */\n\n\n  _createClass(Watch, [{\n    key: \"render\",\n\n    /**\n     * Render function()\n     * This function will return UI of the system.\n     *\tIt will return different text-entry system, depending on which\n     *\ttype property you did pass from index.js\n     */\n    value: function render() {\n      // style={{}} is an inline styling with calculated screen size\n      if (this.type === 'normal') {\n        return React.createElement(\"div\", {\n          className: \"watch\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, this.targetPhrase), React.createElement(TextArea, {\n          inputChar: this.state.inputChar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }), React.createElement(KeyboardNormal, {\n          originalScale: this.originalScale,\n          onKeyCharReceived: this.onKeyCharReceived,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.saveData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, \"SAVE\"));\n      } else if (this.type === 'zoom') {\n        //the save button below is only to demonstrate to you how to save data\n        // to files.\n        //TODO: You need to remove it in your experiment and figure out another way\n        // call this.saveData function to save user's data\n        return React.createElement(\"div\", {\n          className: \"watch\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, this.targetPhrase), React.createElement(TextArea, {\n          inputChar: this.state.inputChar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }), React.createElement(KeyboardZoom, {\n          originalScale: this.originalScale,\n          onKeyCharReceived: this.onKeyCharReceived,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.saveData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, \"SAVE\"));\n      } else {\n        // exception\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, \" [Rendering Failed] You have got wrong parameters. Check your 'type' property \"));\n      }\n    }\n  }]);\n\n  return Watch;\n}(React.Component);\n\nexport default Watch;","map":{"version":3,"sources":["/Users/mac/Documents/keyboardSTUDY/src/watch.js"],"names":["React","TextArea","KeyboardNormal","KeyboardZoom","deviceIndependenceSize","ppi","watchSize","width","height","deviceWidthInPixel","deviceHeightInPixel","download","text","name","type","a","document","createElement","file","Blob","href","URL","createObjectURL","click","Watch","props","onKeyCharReceived","c","setState","inputChar","state","inputPhrase","saveData","log_file","JSON","stringify","user","userid","targetPhrase","timestamp","Date","now","toString","console","log","undefined","match","params","originalScale","scaleVal","Component"],"mappings":"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","sourcesContent":["/***************************************************\n* CSC428/2514 - St. George, Fall 2018\n*\n* File: watch.js\n* Summary: Watch Component\n*\n* The code is commented, and the comments provide information\n* about what each js file is doing.\n*\n* Written by: Seyong Ha, Mingming Fan, Sep. 2018\n*\t\t\t\tAssignment2: Quantitative Analysis\n*\t\t\t\tUpdated at: NA\n****************************************************/\n\n/**\n * Libraries\n */\nimport React from 'react';\nimport './index.css';\nimport TextArea from './textarea'\nimport KeyboardNormal from './keyboard.normal'\nimport KeyboardZoom from './keyboard.wip'\n\n/**\n * Functions\n */\n\n/**\n * @Deprecated.\n * Calculate watch size (width and height) in pixels.\n * \tif you decide to use exact AppleWatch size, use this function to get width and height.\n * @param: ppi , your device independent pixel per inch. Can be acheived from the web.\n * @param: watchSize, default apple watch size, 38mm or 42mm.\n * \t\t\tother size value will be return zero in size.\n */\nconst deviceIndependenceSize = (ppi,watchSize) => {\n\tvar width,height,deviceWidthInPixel,deviceHeightInPixel;\n\tif(watchSize === 42){\n\t\t// AppleWatch Series 3 + size 42mm has a resolution of 312x390 px, 302 ppi\n\t\t//\tDeviceSize: {Width:33.3, Height: 38.6mm}\n\t\t//\tScreenSize: {Width: 26mm , Height: 33mm}\n\t\twidth = 26; height = 33;\n\t\tdeviceWidthInPixel = width/25.4*ppi;\n\t\tdeviceHeightInPixel = height/25.4*ppi;\n\t\treturn {width: deviceWidthInPixel, height:deviceHeightInPixel};\n\t}else if(watchSize === 38){\n\t\t// AppleWatch Series 3 + size 38mm has a resolution of 272x340 px, 290 ppi\n\t\t// \tDeviceSize: {Width: 33.3mm, Height:42.5mm}\n\t\t//\tScreenSize: {Width: 24mm, Height: 30mm}\n\t\twidth = 24; height = 30;\n\t\tdeviceWidthInPixel = width/25.4*ppi;\n\t\tdeviceHeightInPixel = height/25.4*ppi;\n\t\treturn {width: deviceWidthInPixel, height:deviceHeightInPixel};\n\t}else{\n\t\treturn {width:0, height:0}\n\t}\n}\n\n/**\n * Download user typed content and target phrases\n * you can and should add more measurements\n * that you recorded in your study into the text parameter\n * so that you can save them into a file\n * @param {*} text:\n * @param {*} name:\n * @param {*} type:\n */\nfunction download(text, name, type) {\n\t// console.log(JSON.parse(text));\n\tvar a = document.createElement(\"a\");\n\tvar file = new Blob([text], {type: type});\n\ta.href = URL.createObjectURL(file);\n\ta.download = name;\n\ta.click();\n}\n\n/**\n * Watch Class\n * This class extends React.Component\n */\nclass Watch extends React.Component {\n\n\t/**\n\t * Constructor\n\t * @param {} props: a paramater which enables you to access\n\t * \t\t\tvalues passed from parent Componenet(or Node).\n\t * \t\t\te.g., if you pass 'value' as 5 in Watch component\n\t * \t\t\t\t<Watch value={5}/>\n\t * \t\t\t\tyou can access by calling 'this.props.value'\n\t * \t\t\t\tprops are immutable.\n\t */\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\t//Your URL parameter can be accessed with following syntax.\n\t\tconsole.log(this.props.type);\n\t\tconsole.log(this.props.type===undefined);\n\t\tthis.type = (this.props.type === undefined) ? this.props.match.params.type : this.props.type;\n\t\tthis.originalScale = (this.props.originalScale === undefined)?this.props.match.params.scaleVal : this.props.originalScale;\n\t\tthis.userid = (this.props.userid === undefined) ? this.props.match.params.userid : this.props.userid;\n\n\t\t//this.type = this.props.match.params.type;\n\t\t//this.originalScale = this.props.match.params.scaleVal;\n\t\tconsole.log(\"[Watch] type: \"+this.type);\n\t\tconsole.log(\"[Watch] originalScale: \"+this.originalScale);\n\t\t// React Component States.\n\t\t// inputPhrase: a variable containing all characters typed by users.\n\t\t// inputChar: a variable containing your current input character from the Keyboard.\n\t\t// if 'inputPhrase' or 'inputChar' value has changed by onKeyCharReceived(),\n\t\t// Watch Component will re-render the interface if the state has changed by calling\n\t\t// \tsetState({});\n\t\tthis.state = {\n\t\t\tinputPhrase: \"\",\n\t\t\tinputChar: \"\",\n\t\t};\n\n\t\t//add the target phrases here or load them from external files\n\t\tthis.targetPhrase =  \"target phrase one\";\n\n\n\t\t// For Debug, uncomment only if you want to measure exact width and height in pixels.\n\t\t// Following codes won't be affected on any of your code. \n\t\t/*\n\t\tvar size42 = deviceIndependenceSize(112,42);\n\t\tconsole.log(\"AppleWatch 42mm => \"+size42.width +\"/\"+size42.height);\n\t\tvar size38 = deviceIndependenceSize(112,38);\n\t\tconsole.log(\"AppleWatch 38mm => \"+size38.width +\"/\"+size38.height);\n\t\t*/\n\t}\n\n\t/**\n\t * Callback for input character changes.\n\t * @param {} c: changed character\n\t *\n\t * This callback will be passed to child (Keyboard components, in our case).\n\t * when the input character received, it changes inputPhrase state.\n\t */\n\tonKeyCharReceived = (c) => {\n\t\tthis.setState({inputChar : c});\n\t\tthis.state.inputPhrase += c;\n\t};\n\n\n\t//log data to files\n\t//this sample code only logs the target phrase and the user's input phrases\n\t//TODO: you need to log other measurements, such as the time when a user inputs each char, user id, etc.\n\tsaveData = () => {\n\t\tlet log_file = JSON.stringify({\n\t\t\tuser: this.userid,\n\t\t\ttargetPhrase: this.targetPhrase,\n\t\t\tinputPhrase: this.state.inputPhrase,\n\t\t\ttimestamp: Date(Date.now()).toString()\n\t\t})\n\t\tdownload(log_file, \"results.txt\", \"text/plain\");\n\t}\n\n\n\t/**\n\t * Render function()\n\t * This function will return UI of the system.\n\t *\tIt will return different text-entry system, depending on which\n\t *\ttype property you did pass from index.js\n\t */\n\trender(){\n\t\t// style={{}} is an inline styling with calculated screen size\n\t\tif(this.type === 'normal'){\n\t\t\treturn(\n\t\t\t\t<div className=\"watch\">\n\t\t\t\t\t <label>{this.targetPhrase}</label>\n\t\t\t\t\t<TextArea inputChar={this.state.inputChar}/>\n\t\t\t\t\t<KeyboardNormal originalScale={this.originalScale} onKeyCharReceived ={this.onKeyCharReceived}/>\n\t\t\t\t\t<button onClick={this.saveData}>SAVE</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}else if(this.type === 'zoom'){\n\t\t\t//the save button below is only to demonstrate to you how to save data\n\t\t\t// to files.\n\t\t\t//TODO: You need to remove it in your experiment and figure out another way\n\t\t\t// call this.saveData function to save user's data\n\t\t\treturn(\n\t\t\t\t<div className=\"watch\">\n\t\t\t\t  <label>{this.targetPhrase}</label>\n\t\t\t\t\t<TextArea inputChar={this.state.inputChar}/>\n\t\t\t\t\t<KeyboardZoom originalScale={this.originalScale} onKeyCharReceived ={this.onKeyCharReceived}/>\n\t\t\t\t\t<button onClick={this.saveData}>SAVE</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}else{\n\t\t\t// exception\n\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t<p> [Rendering Failed] You have got wrong parameters. Check your 'type' property </p>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default Watch\n"]},"metadata":{},"sourceType":"module"}